user nginx;
worker_processes 1;
pid /var/run/nginx.pid;
error_log /dev/stdout info;

events {
  worker_connections 512;
}

http {
    #include       mime.types;
    access_log /dev/stdout;
    default_type    application/octet-stream;
    sendfile        on;

    keepalive_timeout  65;

    #gzip  on;

    # proxy_cache_path  /data/nginx/cache  levels=1:2    keys_zone=STATIC:10m inactive=365d  max_size=256g use_temp_path=off;

    server {
        root /data/nginx/;
        listen       80;
        server_name  localhost;

        sendfile           on;
        sendfile_max_chunk 1m;
        tcp_nopush on;
        tcp_nodelay       on;
        keepalive_timeout 65;        
        autoindex on;
        etag on;

        resolver 1.1.1.1;


        # remove cloudflare headers
        proxy_hide_header Set-Cookie;
        proxy_hide_header CF-Cache-Status;
        proxy_hide_header Expect-CT;
        proxy_hide_header CF-RAY;
        proxy_hide_header X-DNS-Prefetch-Control;
        # end
    

        # add header to understand caching behavior
        add_header X-Relisten-Audio-Cache $upstream_cache_status;

        location ~* \.mp3$ {
            include cors.conf;

            # Add rewrite rules to handle these requests here
            add_header Cache-Control "public";
            default_type audio/mpeg;
            expires max;
        }

        location ~* \.json$ {
            include cors.conf;

            default_type application/json;
        }

        location ^~ /archive.org/ {
            # include cors.conf;

            set $original_uri '$uri';

            expires max;
            add_header Cache-Control "public, max-age=31536000, immutable";
            # If the file exists, serve it; otherwise, proxy to archive.org.
            try_files $uri @fetch_archive;
        }

        location ^~ /phish.in/ {
            # include cors.conf;

            set $original_uri '$uri';

            expires max;
            add_header Cache-Control "public, max-age=31536000, immutable";
            # If the file exists, serve it; otherwise, proxy to archive.org.
            try_files $uri @fetch_phishin;
        }

        location ^~ /www.panicstream.com/ {
            # include cors.conf;

            set $original_uri '$uri';

            expires max;
            add_header Cache-Control "public, max-age=31536000, immutable";
            # If the file exists, serve it; otherwise, proxy to archive.org.
            try_files $uri @fetch_panicstream;
        }

        location @fetch_archive {
            # include cors.conf;

            # Strip the /archive.org prefix so that the upstream URL becomes:
            # https://archive.org/download/...
            rewrite ^/archive.org(.*)$ $1 break;

            proxy_set_header Host archive.org;
            proxy_pass https://archive.org;
            
            include proxy.conf;         

            # Intercept redirect responses.
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 303 307 308 = @handle_redirect;
        }

        location @fetch_phishin {
            # include cors.conf;

            # Strip the /phish.in prefix so that the upstream URL becomes:
            # https://phish.in/download/...
            rewrite ^/phish.in(.*)$ $1 break;

            proxy_set_header Host phish.in;
            proxy_pass https://phish.in;
            
            include proxy.conf;         

            # Intercept redirect responses.
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 303 307 308 = @handle_redirect;
        }

        location @fetch_panicstream {
            # include cors.conf;

            # Strip the /phish.in prefix so that the upstream URL becomes:
            # https://phish.in/download/...
            rewrite ^/www.panicstream.com(.*)$ $1 break;

            proxy_set_header Host phish.in;
            proxy_pass https://phish.in;
            
            include proxy.conf;         

            # Intercept redirect responses.
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 303 307 308 = @handle_redirect;
        }

        # This location handles intercepted redirects.
        location @handle_redirect {
            # include cors.conf;
            include proxy.conf;     

            set $saved_redirect_location '$upstream_http_location';
            proxy_pass $saved_redirect_location;
        }

        # return 200 'location 3';
    }
}
